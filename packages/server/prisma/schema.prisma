generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email         String     @id
  firstname     String
  lastname      String
  events        Event[]
  locations     Location[]
  notifications Boolean
  contacts      Contact[]

  @@map("users")
}

model Event {
  id               String           @id @default(uuid())
  name             String       
  user             User             @relation(fields: [email], references: [email], onDelete: Cascade)
  email            String
  type             EventType
  startDate        DateTime
  endDate          DateTime
  budget           Decimal
  location         Location         @relation(fields: [locationId], references: [id])
  locationId       String
  headcount        Int
  menuNeeded       Boolean
  decorNeeded      Boolean
  performerNeeded  Boolean
  eventGuest       EventGuest[]
  budgetPlanning   BudgetPlanning[]

  @@unique([name, email])
  @@map("events")
}

model Location {
  id          String  @id @default(uuid())
  user        User    @relation(fields: [email], references: [email], onDelete: Cascade)
  email       String
  name        String  @unique
  events      Event[]
  description String
  address     Address @relation(fields: [addressId], references: [id])
  addressId   String  @unique
  type        String
  price       Decimal
  phone       String
  link        String

  @@unique([name, email])
  @@map("locations")
}

model Address {
  id        String    @id @default(uuid())
  country   Country   @relation(fields: [countryId], references: [id])
  countryId Int
  street    String
  city      String
  state     String
  zip_code  Decimal
  Location  Location?

  @@map("addresses")
}

model Country {
  id      Int       @id @default(autoincrement())
  address Address[]
  name    String
  ISO     String

  @@map("countries")
}

model EventGuest {
  id      Int    @id @default(autoincrement())
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  guest   Guest  @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId String

  @@unique([eventId, guestId])
  @@map("events_guests")
}

model Guest {
  id            String       @id @default(uuid())
  userEmail     String       
  firstname     String
  lastname      String
  email         String
  special_needs String
  EventGuest    EventGuest[] 

  @@unique([userEmail, firstname, lastname, email, special_needs])
  @@map("guests")
}

model BudgetPlanning {
  id          Int       @id @default(autoincrement())
  contactName String
  contactId   String
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  amount      Decimal
  isPaid      Boolean
  description String
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String  

  @@unique([contactId, eventId])
  @@map("budget_planning")
}

model Contact {
  id               String           @id @default(uuid())
  name             String
  phone            String
  email            String
  description      String
  budgetPlanning   BudgetPlanning[]
  user             User             @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail        String

  @@map("contacts")
}

enum EventType {
  WEDDING
  GRADUATION
  PARTY
  CONFERENCE
  EXHIBITION
  CUSTOM
}
